<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" 
    "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="challenge">

    <!-- 특정 roomNum의 모든 방 정보 조회 -->
    <select id="selectRoomInfo" parameterType="int" resultType="com.javaex.vo.ChallengeVo">
        SELECT 
            ri.roomNum AS roomNum,
            ri.roomTitle AS roomTitle,
            ri.roomDescription AS roomDescription,
            ri.roomStartDate AS roomStartDate,
            ri.roomStatusNum AS roomStatusNum,
            p.periodType AS periodType,
            rt.roomTypeName AS roomTypeName,
            c.categoryName AS categoryName,
            ri.roomKeyword AS roomKeyword,
            r.regionName AS regionName,
            ri.roomMinNum AS roomMinNum,
            ri.roomMaxNum AS roomMaxNum,
            ri.roomEnterPoint AS roomPoint,
            ri.roomEnterRate AS roomRate
        FROM roomInfo ri
        JOIN roomType rt ON ri.roomTypeNum = rt.roomTypeNum
        JOIN categories c ON ri.categoryNum = c.categoryNum
        JOIN regions r ON ri.regionNum = r.regionNum
        JOIN period p ON ri.periodNum = p.periodNum 
        WHERE ri.roomNum = #{roomNum}
    </select>

    <!-- 방 헤더 정보 조회 with userNum -->
    <select id="selectRoomHeaderInfo" parameterType="map" resultType="com.javaex.vo.ChallengeVo">
        SELECT 
            ri.roomTitle AS roomTitle,
            ri.roomDescription AS roomDescription,
            ri.roomStartDate AS roomStartDate,
            ri.roomStatusNum AS roomStatusNum,
            p.periodType AS periodType,
            rt.roomTypeName AS roomTypeName,
            c.categoryName AS categoryName,
            ri.roomKeyword AS roomKeyword,
            r.regionName AS regionName,
            ri.roomMinNum AS roomMinNum,
            COUNT(eu_active.userNum) AS enteredUserNum,
            COALESCE(eu.enteredUserStatusNum, 0) AS enteredUserStatusNum
        FROM roomInfo ri
        JOIN roomType rt ON ri.roomTypeNum = rt.roomTypeNum
        JOIN categories c ON ri.categoryNum = c.categoryNum
        JOIN regions r ON ri.regionNum = r.regionNum
        JOIN period p ON ri.periodNum = p.periodNum
        LEFT JOIN enteredUser eu ON ri.roomNum = eu.roomNum AND eu.userNum = #{userNum}
        LEFT JOIN enteredUser eu_active ON ri.roomNum = eu_active.roomNum AND eu_active.enteredUserStatusNum = 1
        WHERE ri.roomNum = #{roomNum}
        GROUP BY ri.roomTitle, ri.roomDescription, ri.roomStartDate, ri.roomStatusNum, p.periodType, rt.roomTypeName, c.categoryName, ri.roomKeyword, r.regionName, ri.roomMinNum, eu.enteredUserStatusNum
    </select>
    <!-- 사용자 권한 조회 -->
    <select id="selectUserAuth" parameterType="map" resultType="int">
        SELECT enteredUserAuth FROM enteredUser 
        WHERE roomNum = #{roomNum} AND userNum = #{userNum};
    </select>
    <!-- 사용자 권한 조회 -->
       
    <select id="getUserAuth" parameterType="map" resultType="int">
        SELECT enteredUserAuth FROM enteredUser
        WHERE roomNum = #{roomNum} AND userNum = #{userNum}
    </select>

    
    <!-- 방 시작 시간 업데이트 -->
    <update id="updateRoomStartDate" parameterType="map">
        UPDATE roomInfo
        SET roomStartDate = #{roomStartDate}
        WHERE roomNum = #{roomNum};
    </update>

    <!-- 챌린지 시작: roomStartDate를 현재 시간으로 설정하고 roomStatusNum을 3으로 변경 -->
    <update id="startChallenge" parameterType="map">
        UPDATE roomInfo
        SET roomStartDate = NOW(),
            roomStatusNum = 3
        WHERE roomNum = #{roomNum};
    </update>

    <!-- 방 상태 업데이트 (roomStatusNum) -->
    <update id="updateRoomStatus" parameterType="map">
        UPDATE roomInfo
        SET roomStatusNum = #{roomStatusNum}
        WHERE roomNum = #{roomNum};
    </update>
    
    <!-- 사용자 참가 여부 확인 (enteredUserStatusNum이 2가 아닌 경우만) -->
    <select id="checkUserJoined" parameterType="map" resultType="int">
        SELECT COUNT(*) AS joinedCount 
        FROM enteredUser
        WHERE roomNum = #{roomNum} 
          AND userNum = #{userNum}
          AND enteredUserStatusNum != #{excludeStatusNum};
    </select>

    <!-- evaluationImg 삭제 -->
    <delete id="deleteEvaluationImgsByRoomNum" parameterType="int">
        DELETE ei FROM evaluationImg ei
        JOIN evaluation e ON ei.evalNum = e.evalNum
        JOIN challenges c ON e.missionNum = c.missionNum
        JOIN roomDay rd ON c.roomDayNum = rd.roomDayNum
        WHERE rd.roomNum = #{roomNum};
    </delete>

    <!-- evaluations 삭제 -->
    <delete id="deleteEvaluationsByRoomNum" parameterType="int">
        DELETE e FROM evaluation e
        JOIN challenges c ON e.missionNum = c.missionNum
        JOIN roomDay rd ON c.roomDayNum = rd.roomDayNum
        WHERE rd.roomNum = #{roomNum};
    </delete>

    <!-- missionImg 삭제 -->
    <delete id="deleteMissionImgsByRoomNum" parameterType="int">
        DELETE mi FROM missionImg mi
        JOIN challenges c ON mi.missionNum = c.missionNum
        JOIN roomDay rd ON c.roomDayNum = rd.roomDayNum
        WHERE rd.roomNum = #{roomNum};
    </delete>

    <!-- challenges 삭제 -->
    <delete id="deleteChallengesByRoomNum" parameterType="int">
        DELETE c FROM challenges c
        JOIN roomDay rd ON c.roomDayNum = rd.roomDayNum
        WHERE rd.roomNum = #{roomNum};
    </delete>

    <!-- roomDay 삭제 -->
    <delete id="deleteRoomDaysByRoomNum" parameterType="int">
        DELETE FROM roomDay
        WHERE roomNum = #{roomNum};
    </delete>

    <!-- announcements 삭제 -->
    <delete id="deleteAnnouncementsByRoomNum" parameterType="int">
        DELETE FROM announcement
        WHERE roomNum = #{roomNum};
    </delete>

    <!-- roomChat 삭제 -->
    <delete id="deleteRoomChatsByRoomNum" parameterType="int">
        DELETE FROM roomChat
        WHERE roomNum = #{roomNum};
    </delete>

    <!-- enteredUser 삭제 -->
    <delete id="deleteEnteredUsers" parameterType="int">
        DELETE FROM enteredUser
        WHERE roomNum = #{roomNum};
    </delete>

    <!-- roomInfo 삭제 -->
    <delete id="deleteRoom" parameterType="int">
        DELETE FROM roomInfo
        WHERE roomNum = #{roomNum};
    </delete>

    <!-- enteredUser 업데이트 -->
    <update id="updateEnteredUser" parameterType="map">
        UPDATE enteredUser
        SET enteredUserStatusNum = #{enteredUserStatusNum},
            enteredUserAuth = #{enteredUserAuth}
        WHERE roomNum = #{roomNum} AND userNum = #{userNum};
    </update>

    <!-- enteredUser 삽입 -->
    <insert id="joinRoom" parameterType="map">
        INSERT INTO enteredUser (roomNum, userNum, enteredUserStatusNum, enteredUserAuth)
        VALUES (#{roomNum}, #{userNum}, #{enteredUserStatusNum}, #{enteredUserAuth});
    </insert>

    <!-- enteredUser 조회 -->
    <select id="selectEnteredUser" parameterType="map" resultType="com.javaex.vo.ChallengeVo">
        SELECT 
            roomNum AS roomNum,
            userNum AS userNum,
            enteredUserStatusNum AS enteredUserStatusNum,
            enteredUserAuth AS userAuth
        FROM enteredUser
        WHERE roomNum = #{roomNum} AND userNum = #{userNum};
    </select>
    
    <select id="getEnteredUserNum" parameterType="int" resultType="int">
    SELECT COUNT(*)
    FROM enteredUser
    WHERE roomNum = #{roomNum} AND enteredUserStatusNum = 1
</select>

    <!-- 유저 세부 정보 조회 -->
    <select id="selectUserDetails" parameterType="map" resultType="com.javaex.vo.ChallengeVo">
        SELECT 
            eu.userNum AS userNum,
            ri.roomEnterPoint AS roomPoint,
            COALESCE(AVG(e.achievementRate), 0) AS achievementRate
        FROM enteredUser eu
        JOIN roomInfo ri ON eu.roomNum = ri.roomNum
        LEFT JOIN evaluation e ON e.userNum = eu.userNum AND e.roomNum = ri.roomNum
        WHERE eu.userNum = #{userNum} AND eu.roomNum = #{roomNum}
        GROUP BY eu.userNum, ri.roomEnterPoint;
    </select>

    <!-- 포인트 히스토리 삽입 -->
    <insert id="insertPointHistory" parameterType="map">
        INSERT INTO pointHistory (userNum, historyPoint, pointPurposeNum, historyInfo, historyDate)
        VALUES (#{userNum}, #{point}, #{pointPurposeNum}, #{historyInfo}, NOW());
    </insert>
    
    <!-- 참여자 수 조회 -->
    <select id="getParticipantCount" parameterType="int" resultType="int">
        SELECT COUNT(*) AS enteredUserNum
        FROM enteredUser 
        WHERE roomNum = #{roomNum} AND enteredUserStatusNum = 1;
    </select>

    <!-- 다음 유저의 userNum 조회 -->
    <select id="getNextUserNum" parameterType="map" resultType="int">
        SELECT userNum 
        FROM enteredUser
        WHERE roomNum = #{roomNum} 
          AND userNum != #{currentUserNum} 
          AND enteredUserStatusNum != 2
        ORDER BY enteredUserNum ASC 
        LIMIT 1;
    </select>

    <!-- enteredUserAuth 업데이트 -->
    <update id="updateEnteredUserAuth" parameterType="map">
        UPDATE enteredUser
        SET enteredUserAuth = #{enteredUserAuth}
        WHERE roomNum = #{roomNum} AND userNum = #{userNum};
    </update>

    <!-- enteredUserStatusNum 업데이트 -->
    <update id="updateEnteredUserStatus" parameterType="map">
        UPDATE enteredUser
        SET enteredUserStatusNum = #{enteredUserStatusNum}
        WHERE roomNum = #{roomNum} AND userNum = #{userNum};
    </update>

    <!-- 특정 유저의 상태 조회 -->
    <select id="getUserStatus" parameterType="map" resultType="com.javaex.vo.ChallengeVo">
        SELECT enteredUserStatusNum AS enteredUserStatusNum 
        FROM enteredUser
        WHERE roomNum = #{roomNum} AND userNum = #{userNum};
    </select>

    <!-- 현재 내 포인트 -->
    <select id="getUserPoints" parameterType="int" resultType="int">
        SELECT 
            COALESCE(SUM(
                CASE 
                    WHEN historyInfo = '+' THEN historyPoint
                    WHEN historyInfo = '-' THEN -historyPoint
                    ELSE 0 
                END
            ), 0) AS userPoints
        FROM pointHistory
        WHERE userNum = #{userNum}
    </select>
    
    <!-- roomEnterPoint 삽입 -->
    <insert id="roomEnterPoint" parameterType="map">
        INSERT INTO pointHistory (userNum, pointPurposeNum, historyDate, historyPoint, historyInfo)
        VALUES (#{userNum}, 6, NOW(), #{roomEnterPoint}, "-")
    </insert>
    
    <!-- returnEnterPoint 삽입 -->
    <insert id="returnEnterPoint" parameterType="map">
        INSERT INTO pointHistory (userNum, pointPurposeNum, historyDate, historyPoint, historyInfo)
        VALUES (#{userNum}, 11, NOW(), #{returnPoint}, "+");
    </insert>
<!-- 알림 삽입 -->
    <!-- ChallengeMapper.xml -->

<insert id="insertNoticeForRoom" parameterType="com.javaex.vo.ChallengeVo">
    INSERT INTO notice (userNum, msgSender, noticeTitle, noticeMsg, isCheck, createDate)
    VALUES (#{userNum}, #{msgSender}, #{noticeTitle}, #{noticeMsg}, #{isCheck}, NOW())
</insert>


    <!-- 특정 방에 참여한 모든 사용자 조회 -->
    <select id="selectParticipants" parameterType="int" resultType="com.javaex.vo.ChallengeVo">
        SELECT eu.userNum
        FROM enteredUser eu
        WHERE eu.roomNum = #{roomNum} AND eu.enteredUserStatusNum = 1
    </select>
    
     <!-- 특정 방에 참여한 모든 사용자 조회 -->
    <select id="selectParticipants2" parameterType="int" resultType="int">
        SELECT count(eu.userNum)
        FROM enteredUser eu
        WHERE eu.roomNum = #{roomNum} AND eu.enteredUserStatusNum = 1
    </select>
    
    <select id="selectRoomOwner" parameterType="int" resultType="int">
    SELECT userNum 
    FROM enteredUser
    WHERE roomNum = #{roomNum} AND enteredUserAuth = 1
    LIMIT 1
</select>

 <!-- 1. 지역 수정 -->
    <update id="updateRegion" parameterType="map">
        UPDATE roomInfo
        SET regionNum = #{regionNum}
        WHERE roomNum = #{roomNum};
    </update>

    <!-- 2. 방 키워드 수정 -->
    <update id="updateRoomKeyword" parameterType="map">
        UPDATE roomInfo
        SET roomKeyword = #{roomKeyword}
        WHERE roomNum = #{roomNum};
    </update>

    <!-- 3. 방 제목 수정 -->
    <update id="updateRoomTitle" parameterType="map">
        UPDATE roomInfo
        SET roomTitle = #{roomTitle}
        WHERE roomNum = #{roomNum};
    </update>

    <!-- 4. 방 썸네일 수정 -->
    <update id="updateRoomThumbnail" parameterType="map">
        UPDATE roomInfo
        SET roomThumbnail = #{roomThumbnail}
        WHERE roomNum = #{roomNum};
    </update>

    <!-- 5. 최소 참가 인원 수정 -->
    <update id="updateRoomMinNum" parameterType="map">
        UPDATE roomInfo
        SET roomMinNum = #{roomMinNum}
        WHERE roomNum = #{roomNum};
    </update>

    <!-- 6. 최대 참가 인원 수정 -->
    <update id="updateRoomMaxNum" parameterType="map">
        UPDATE roomInfo
        SET roomMaxNum = #{roomMaxNum}
        WHERE roomNum = #{roomNum};
    </update>

    <!-- 7. 방 참가 포인트 수정 -->
    <update id="updateRoomEnterPoint" parameterType="map">
        UPDATE roomInfo
        SET roomEnterPoint = #{roomEnterPoint}
        WHERE roomNum = #{roomNum};
    </update>

    <!-- 8. 방 참가 비율 수정 -->
    <update id="updateRoomEnterRate" parameterType="map">
        UPDATE roomInfo
        SET roomEnterRate = #{roomEnterRate}
        WHERE roomNum = #{roomNum};
    </update>

    <!-- 9. 평가 유형 수정 -->
    <update id="updateEvaluationType" parameterType="map">
        UPDATE roomInfo
        SET evaluationType = #{evaluationType}
        WHERE roomNum = #{roomNum};
    </update>

    <!-- 방 썸네일 조회 (기존 정보 조회) -->
    <select id="selectRoomInfoByRoomNum" parameterType="int" resultType="com.javaex.vo.ChallengeVo">
        SELECT 
            roomThumbnail
        FROM roomInfo
        WHERE roomNum = #{roomNum};
    </select>


<!-- 지역 목록 가져오기 -->
    <select id="getRegions" resultType="com.javaex.vo.ChallengeVo">
        SELECT regionNum, regionName FROM regions;
    </select>

   


    <!-- 포인트 히스토리 추가 -->
    <insert id="addPointHistory" parameterType="map">
        INSERT INTO pointHistory (userNum, historyPoint, pointPurposeNum, historyInfo, historyDate)
        VALUES (#{userNum}, #{point}, #{pointPurposeNum}, #{historyInfo}, NOW());
    </insert>
















</mapper>
