<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">


<mapper namespace="Mypage">
	<!-- 사용자 정보 -->
	<select id="getUserInfo" parameterType="int"
		resultType="com.javaex.vo.HmkUserVo">
    <![CDATA[
        SELECT 
            u.userNum,
            u.userEmail,
            u.userName as nickname,
            u.usingProfilePic as profileImage,
            u.userStatus,
            u.socialLogin,
            r.regionName as region,
            u.userPw as currentPassword,
            
            -- 회원 소유 프로필 이미지 목록을 JSON 배열로 반환
            (
                SELECT JSON_ARRAYAGG(i.itemImg) 
                FROM purchaseHistory ph
                JOIN item i ON ph.itemNum = i.itemNum
                WHERE ph.userNum = u.userNum
                AND ph.purchasedStatus = '꾸미기'
            ) AS ownedProfileImages
            
        FROM 
            users u
            LEFT JOIN regions r ON u.regionNum = r.regionNum
        WHERE 
            u.userNum = #{userNum}
    ]]>
	</select>

	<!-- 사용자의 챌린지 통계(count) 조회 -->
	<select id="getUserChallengeStats" parameterType="int"
		resultType="com.javaex.vo.HmkUserVo">
    <![CDATA[
        SELECT 
            t1.ongoing_challenges as ongoingChallenges,
            t1.upcoming_challenges as upcomingChallenges,
            t1.completed_challenges as completedChallenges,
            t2.achievement_rate as participationScore
        FROM (
            -- <<챌린지 상태별 카운트>>
            SELECT 
                SUM(CASE WHEN rs.roomStatusName = '시작' THEN 1 ELSE 0 END) as ongoing_challenges,
                SUM(CASE WHEN rs.roomStatusName IN ('모집 전', '모집 중') THEN 1 ELSE 0 END) as upcoming_challenges,
                SUM(CASE WHEN rs.roomStatusName = '종료' THEN 1 ELSE 0 END) as completed_challenges
            FROM roomInfo ri
            JOIN roomStatus rs ON ri.roomStatusNum = rs.roomStatusNum
            JOIN enteredUser eu ON ri.roomNum = eu.roomNum
            WHERE eu.userNum = #{userNum}
            AND eu.enteredUserStatusNum = 1
        ) t1,
        (
            -- <<종합 달성률 계산>>
            SELECT 
                ROUND(
                    (COUNT(CASE WHEN e.evalType = '승인완료' THEN 1 END) * 100.0) / 
                    NULLIF(COUNT(*), 0), 
                    2
                ) as achievement_rate
            FROM challenges c
            JOIN roomDay rd ON c.roomDayNum = rd.roomDayNum
            JOIN roomInfo ri ON rd.roomNum = ri.roomNum
            JOIN enteredUser eu ON ri.roomNum = eu.roomNum
            LEFT JOIN evaluation e ON c.missionNum = e.missionNum 
                                AND e.submitUser = eu.userNum
            WHERE eu.userNum = #{userNum}
            AND eu.enteredUserStatusNum = 1
        ) t2
        ]]>
	</select>


	<!-- 프로필 이미지 업데이트 -->
	<update id="updateProfileImage"
		parameterType="com.javaex.vo.HmkUserVo">
    <![CDATA[
        UPDATE users 
        SET usingProfilePic = #{profileImage}
        WHERE userNum = #{userNum}
    ]]>
	</update>

	<!-- 닉네임 중복 체크 -->
	<select id="checkNickname" parameterType="string"
		resultType="int">
	    <![CDATA[
	    SELECT COUNT(*) FROM users WHERE userName = #{nickname}
	    ]]>
	</select>

	<!-- 닉네임 업데이트 -->
	<update id="updateNickname"
		parameterType="com.javaex.vo.HmkUserVo">
    <![CDATA[
        UPDATE users 
        SET userName = #{nickname}
        WHERE userNum = #{userNum}
    ]]>
	</update>

	<!-- 지역 업데이트 -->
	<update id="updateAddress"
		parameterType="com.javaex.vo.HmkUserVo">
    <![CDATA[
        UPDATE users 
        SET regionNum = (SELECT regionNum FROM regions WHERE regionName = #{region})
        WHERE userNum = #{userNum}
    ]]>
	</update>

	<!-- 자동완성 지역 검색 쿼리 -->
	<select id="findRegionsByName" parameterType="string"
		resultType="string">
 	<![CDATA[
        SELECT regionName
        FROM regions
        WHERE regionName LIKE #{query}
    ]]>
	</select>

	<!-- 비밀번호 조회 -->
	<select id="getUserPassword" parameterType="int" resultType="string">
    <![CDATA[
        SELECT userPw
        FROM users
        WHERE userNum = #{userNum}
    ]]>
	</select>

	<!-- 비밀번호 업데이트 -->
	<update id="updatePassword" parameterType="com.javaex.vo.HmkUserVo">
    <![CDATA[
        UPDATE users
        SET userPw = #{newPassword}
        WHERE userNum = #{userNum}
    ]]>
	</update>

	<!-- 차트 데이터 조회 -->
	<select id="getCharts" parameterType="int"
		resultType="com.javaex.vo.HmkChartDataVo">
    <![CDATA[
        SELECT 
            chart_data.chart_title as chartTitle,
            chart_data.attended_count as attendedCount,
            chart_data.total_count as totalCount,
            chart_data.ratio_display as ratioDisplay,
            chart_data.percentage as percentage
        FROM (
            -- 1. 일반방 미션 수행률
            SELECT 
                '일반방 미션 수행률' as chart_title,
                COUNT(DISTINCT CASE WHEN e.submitDate IS NOT NULL THEN c.missionNum END) as attended_count,
                COUNT(DISTINCT c.missionNum) as total_count,
                CONCAT(
                    COUNT(DISTINCT CASE WHEN e.submitDate IS NOT NULL THEN c.missionNum END),
                    '/',
                    COUNT(DISTINCT c.missionNum)
                ) as ratio_display,
                ROUND(
                    (COUNT(DISTINCT CASE WHEN e.submitDate IS NOT NULL THEN c.missionNum END) * 100.0) / 
                    NULLIF(COUNT(DISTINCT c.missionNum), 0), 
                    1
                ) as percentage
            FROM roomInfo ri
            JOIN roomType rt ON ri.roomTypeNum = rt.roomTypeNum
            JOIN roomDay rd ON ri.roomNum = rd.roomNum
            JOIN challenges c ON rd.roomDayNum = c.roomDayNum
            JOIN enteredUser eu ON ri.roomNum = eu.roomNum
            LEFT JOIN evaluation e ON c.missionNum = e.missionNum AND e.submitUser = eu.userNum
            WHERE eu.userNum = #{userNum}
            AND rt.roomTypeName = '일반'
            AND ri.roomStatusNum = 3

            UNION ALL

            -- 2. 챌린지방 미션 수행률
            SELECT 
                '챌린지방 미션 수행률' as chart_title,
                COUNT(DISTINCT CASE WHEN e.submitDate IS NOT NULL THEN c.missionNum END) as attended_count,
                COUNT(DISTINCT c.missionNum) as total_count,
                CONCAT(
                    COUNT(DISTINCT CASE WHEN e.submitDate IS NOT NULL THEN c.missionNum END),
                    '/',
                    COUNT(DISTINCT c.missionNum)
                ) as ratio_display,
                ROUND(
                    (COUNT(DISTINCT CASE WHEN e.submitDate IS NOT NULL THEN c.missionNum END) * 100.0) / 
                    NULLIF(COUNT(DISTINCT c.missionNum), 0), 
                    1
                ) as percentage
            FROM roomInfo ri
            JOIN roomType rt ON ri.roomTypeNum = rt.roomTypeNum
            JOIN roomDay rd ON ri.roomNum = rd.roomNum
            JOIN challenges c ON rd.roomDayNum = c.roomDayNum
            JOIN enteredUser eu ON ri.roomNum = eu.roomNum
            LEFT JOIN evaluation e ON c.missionNum = e.missionNum AND e.submitUser = eu.userNum
            WHERE eu.userNum = #{userNum}
            AND rt.roomTypeName = '챌린지'
            AND ri.roomStatusNum = 3

            UNION ALL

            -- 3. 전체 미션 수행률
            SELECT 
                '전체 미션 수행률' as chart_title,
                COUNT(DISTINCT CASE WHEN e.submitDate IS NOT NULL THEN c.missionNum END) as attended_count,
                COUNT(DISTINCT c.missionNum) as total_count,
                CONCAT(
                    COUNT(DISTINCT CASE WHEN e.submitDate IS NOT NULL THEN c.missionNum END),
                    '/',
                    COUNT(DISTINCT c.missionNum)
                ) as ratio_display,
                ROUND(
                    (COUNT(DISTINCT CASE WHEN e.submitDate IS NOT NULL THEN c.missionNum END) * 100.0) / 
                    NULLIF(COUNT(DISTINCT c.missionNum), 0), 
                    1
                ) as percentage
            FROM roomInfo ri
            JOIN roomDay rd ON ri.roomNum = rd.roomNum
            JOIN challenges c ON rd.roomDayNum = c.roomDayNum
            JOIN enteredUser eu ON ri.roomNum = eu.roomNum
            LEFT JOIN evaluation e ON c.missionNum = e.missionNum AND e.submitUser = eu.userNum
            WHERE eu.userNum = #{userNum}
            AND ri.roomStatusNum = 3

            UNION ALL

            -- 4. 일반방 미션 달성률
            SELECT 
                '일반방 미션 달성률' as chart_title,
                COUNT(CASE WHEN e.evalType = '승인완료' THEN 1 END) as attended_count,
                COUNT(c.missionNum) as total_count,
                CONCAT(
                    COUNT(CASE WHEN e.evalType = '승인완료' THEN 1 END),
                    '/',
                    COUNT(c.missionNum)
                ) as ratio_display,
                ROUND(
                    (COUNT(CASE WHEN e.evalType = '승인완료' THEN 1 END) * 100.0) / 
                    NULLIF(COUNT(c.missionNum), 0), 
                    1
                ) as percentage
            FROM roomInfo ri
            JOIN roomType rt ON ri.roomTypeNum = rt.roomTypeNum
            JOIN roomDay rd ON ri.roomNum = rd.roomNum
            JOIN challenges c ON rd.roomDayNum = c.roomDayNum
            JOIN enteredUser eu ON ri.roomNum = eu.roomNum
            LEFT JOIN evaluation e ON c.missionNum = e.missionNum AND e.submitUser = eu.userNum
            WHERE eu.userNum = #{userNum}
            AND rt.roomTypeName = '일반'
            AND ri.roomStatusNum = 3

            UNION ALL

            -- 5. 챌린지방 미션 달성률
            SELECT 
                '챌린지방 미션 달성률' as chart_title,
                COUNT(CASE WHEN e.evalType = '승인완료' THEN 1 END) as attended_count,
                COUNT(c.missionNum) as total_count,
                CONCAT(
                    COUNT(CASE WHEN e.evalType = '승인완료' THEN 1 END),
                    '/',
                    COUNT(c.missionNum)
                ) as ratio_display,
                ROUND(
                    (COUNT(CASE WHEN e.evalType = '승인완료' THEN 1 END) * 100.0) / 
                    NULLIF(COUNT(c.missionNum), 0), 
                    1
                ) as percentage
            FROM roomInfo ri
            JOIN roomType rt ON ri.roomTypeNum = rt.roomTypeNum
            JOIN roomDay rd ON ri.roomNum = rd.roomNum
            JOIN challenges c ON rd.roomDayNum = c.roomDayNum
            JOIN enteredUser eu ON ri.roomNum = eu.roomNum
            LEFT JOIN evaluation e ON c.missionNum = e.missionNum AND e.submitUser = eu.userNum
            WHERE eu.userNum = #{userNum}
            AND rt.roomTypeName = '챌린지'
            AND ri.roomStatusNum = 3

            UNION ALL

            -- 6. 전체 미션 달성률
            SELECT 
                '전체 미션 달성률' as chart_title,
                COUNT(CASE WHEN e.evalType = '승인완료' THEN 1 END) as attended_count,
                COUNT(c.missionNum) as total_count,
                CONCAT(
                    COUNT(CASE WHEN e.evalType = '승인완료' THEN 1 END),
                    '/',
                    COUNT(c.missionNum)
                ) as ratio_display,
                ROUND(
                    (COUNT(CASE WHEN e.evalType = '승인완료' THEN 1 END) * 100.0) / 
                    NULLIF(COUNT(c.missionNum), 0), 
                    1
                ) as percentage
            FROM roomInfo ri
            JOIN roomDay rd ON ri.roomNum = rd.roomNum
            JOIN challenges c ON rd.roomDayNum = c.roomDayNum
            JOIN enteredUser eu ON ri.roomNum = eu.roomNum
            LEFT JOIN evaluation e ON c.missionNum = e.missionNum AND e.submitUser = eu.userNum
            WHERE eu.userNum = #{userNum}
            AND ri.roomStatusNum = 3
        ) chart_data
        ORDER BY 
            CASE chart_title
                WHEN '일반방 미션 수행률' THEN 1
                WHEN '챌린지방 미션 수행률' THEN 2
                WHEN '전체 미션 수행률' THEN 3
                WHEN '일반방 미션 달성률' THEN 4
                WHEN '챌린지방 미션 달성률' THEN 5
                WHEN '전체 미션 달성률' THEN 6
            END
            ]]>
	</select>

	<!-- 내가 만든 방 목록 조회 -->
	<select id="getMyCreatedRooms" parameterType="int"
		resultType="com.javaex.vo.HmkChallengeVo">
	<![CDATA[
	    SELECT DISTINCT
	        r.roomNum,
	        r.roomTitle,
	        r.roomThumbNail,
	        DATE_FORMAT(r.roomStartDate, '%Y-%m-%d') as roomStartDate,
	        CASE 
	            WHEN p.periodType = 7 THEN DATE_FORMAT(DATE_ADD(r.roomStartDate, INTERVAL 7 DAY), '%Y-%m-%d')
	            WHEN p.periodType = 14 THEN DATE_FORMAT(DATE_ADD(r.roomStartDate, INTERVAL 14 DAY), '%Y-%m-%d')
	            WHEN p.periodType = 28 THEN DATE_FORMAT(DATE_ADD(r.roomStartDate, INTERVAL 28 DAY), '%Y-%m-%d')
	            ELSE DATE_FORMAT(DATE_ADD(r.roomStartDate, INTERVAL p.periodType DAY), '%Y-%m-%d')
	        END as endDate,
	        r.roomDescription,
	        r.roomStatusNum,
	        eu.enteredUserAuth,
	        rs.roomStatusName
	    FROM
	        roomInfo r
	        JOIN enteredUser eu ON r.roomNum = eu.roomNum
	        JOIN period p ON r.periodNum = p.periodNum
	        JOIN roomStatus rs ON r.roomStatusNum = rs.roomStatusNum
	    WHERE
	        eu.userNum = #{userNum}
	        AND eu.enteredUserAuth = 1
	    ORDER BY
	        r.roomStartDate DESC
	]]>
	</select>

	<!-- 진행 중인 챌린지 목록 (enteredUserStatusNum = 1인 방만) -->
	<select id="getOngoingChallenges" parameterType="int"
		resultType="com.javaex.vo.HmkChallengeVo">
	    <![CDATA[
        WITH LatestStatus AS (
            SELECT 
                eu.roomNum,
                eu.userNum,
                eu.enteredUserStatusNum,
                ROW_NUMBER() OVER (
                    PARTITION BY eu.roomNum, eu.userNum 
                    ORDER BY eu.enteredUserNum DESC
                ) as rn
            FROM enteredUser eu
        )
        SELECT DISTINCT
            r.roomNum,
            r.roomTitle,
            r.roomThumbNail,
            r.roomStartDate
        FROM roomInfo r
        JOIN LatestStatus ls ON r.roomNum = ls.roomNum
        JOIN roomStatus rs ON r.roomStatusNum = rs.roomStatusNum
        WHERE ls.userNum = #{userNum}
        AND ls.rn = 1
        AND ls.enteredUserStatusNum = 1
        AND rs.roomStatusName = '시작'
        ORDER BY r.roomStartDate DESC
    ]]>
	</select>


	<!-- 시작 예정 챌린지 목록 -->
	<select id="getUpcomingChallenges" parameterType="int"
		resultType="com.javaex.vo.HmkChallengeVo">
    <![CDATA[
        WITH LatestStatus AS (
            SELECT 
                eu.roomNum,
                eu.userNum,
                eu.enteredUserStatusNum,
                ROW_NUMBER() OVER (
                    PARTITION BY eu.roomNum, eu.userNum 
                    ORDER BY eu.enteredUserNum DESC
                ) as rn
            FROM enteredUser eu
        )
        SELECT DISTINCT
            r.roomNum,
            r.roomTitle,
            r.roomThumbNail,
            r.roomStartDate
        FROM roomInfo r
        JOIN LatestStatus ls ON r.roomNum = ls.roomNum
        JOIN roomStatus rs ON r.roomStatusNum = rs.roomStatusNum
        WHERE ls.userNum = #{userNum}
        AND ls.rn = 1
        AND ls.enteredUserStatusNum = 1 
        AND rs.roomStatusName IN ('모집 전', '모집 중')
        ORDER BY r.roomStartDate ASC
    ]]>
</select>

	<!-- 완료된 챌린지 목록 -->
	<select id="getCompletedChallenges" parameterType="int"
		resultType="com.javaex.vo.HmkChallengeVo">
    <![CDATA[
        WITH MemberRole AS (
            SELECT 
                eu.roomNum,
                eu.userNum,
                eu.enteredUserAuth,
                ROW_NUMBER() OVER (
                    PARTITION BY eu.roomNum, eu.userNum 
                    ORDER BY eu.enteredUserAuth DESC
                ) as role_rank
            FROM enteredUser eu
        )
        SELECT DISTINCT
            r.roomNum,
            r.roomTitle,
            r.roomThumbNail,
            r.roomStartDate,
            DATE_ADD(r.roomStartDate, INTERVAL p.periodType DAY) as endDate
        FROM roomInfo r
        JOIN MemberRole mr ON r.roomNum = mr.roomNum
        JOIN roomStatus rs ON r.roomStatusNum = rs.roomStatusNum
        JOIN period p ON r.periodNum = p.periodNum
        WHERE mr.userNum = #{userNum}
        AND mr.role_rank = 1
        AND rs.roomStatusName = '종료'
        ORDER BY r.roomStartDate DESC
        ]]>
	</select>

	<!-- 오늘의 미션이 있는 진행중인 방 조회 -->
	<select id="getTodayMissionRooms" parameterType="int"
		resultType="com.javaex.vo.HmkChallengeVo">
		<![CDATA[
		    SELECT DISTINCT
		        ri.roomNum,
		        ri.roomTitle,
		        ri.roomThumbNail,
		        DATE_FORMAT(ri.roomStartDate, '%Y-%m-%d') as roomStartDate,
		        c.missionNum,
		        c.missionName,
		        c.missionGoal,
		        c.missionMethod,
		        mt.missionType,
		        mt.missionPoint,
		        d.dateName as dayNumber
		    FROM roomInfo ri
		    JOIN enteredUser eu ON ri.roomNum = eu.roomNum
		    JOIN roomDay rd ON ri.roomNum = rd.roomNum
		    JOIN day d ON rd.dateNum = d.dateNum
		    JOIN challenges c ON rd.roomDayNum = c.roomDayNum
		    JOIN missionType mt ON c.missionTypeNum = mt.missionTypeNum
		    WHERE ri.roomStatusNum = 3  
		    AND eu.userNum = #{userNum}  
		    AND eu.enteredUserStatusNum = 1  
		    AND d.dateName = CASE DAYOFWEEK(DATE_ADD(UTC_TIMESTAMP(), INTERVAL 9 HOUR))
		        WHEN 1 THEN 7    -- 일요일
		        WHEN 2 THEN 1    -- 월요일
		        WHEN 3 THEN 2    -- 화요일
		        WHEN 4 THEN 3    -- 수요일
		        WHEN 5 THEN 4    -- 목요일
		        WHEN 6 THEN 5    -- 금요일
		        WHEN 7 THEN 6    -- 토요일
		    END
		    AND NOT EXISTS (  
		        SELECT 1 
		        FROM evaluation e 
		        WHERE e.missionNum = c.missionNum 
		        AND e.submitUser = eu.userNum
		        AND e.submitDate = DATE(DATE_ADD(UTC_TIMESTAMP(), INTERVAL 9 HOUR))
		    )
		    ORDER BY ri.roomStartDate DESC
		]]>
	</select>

	<!-- 포인트 요약 정보 조회 -->
	<select id="getPointSummary" parameterType="int"
		resultType="com.javaex.vo.HmkPointSummaryVo">
    <![CDATA[
    SELECT 
        COALESCE(SUM(CASE WHEN historyInfo = '+' THEN historyPoint ELSE 0 END), 0) as pointsEarned,
        COALESCE(SUM(CASE WHEN historyInfo = '-' THEN historyPoint ELSE 0 END), 0) as pointsSpent,
        COALESCE(SUM(CASE WHEN historyInfo = '+' THEN historyPoint ELSE 0 END) - 
                 SUM(CASE WHEN historyInfo = '-' THEN historyPoint ELSE 0 END), 0) as totalPoints
    FROM pointHistory
    WHERE userNum = #{userNum}
    ]]>
	</select>

	<!-- 포인트 상세 내역 조회 -->
	<select id="getPointHistory" parameterType="map"
		resultType="com.javaex.vo.HmkPointHistoryVo">
	<![CDATA[
	    SELECT 
	        DATE_FORMAT(ph.historyDate, '%Y-%m-%d') AS date,
	        ph.historyNum,
	        pp.purposeName,
	        ph.historyPoint,
	        ph.historyInfo,
	        (
	            SELECT COALESCE(
	                SUM(CASE 
	                    WHEN ph2.historyInfo = '+' THEN ph2.historyPoint 
	                    WHEN ph2.historyInfo = '-' THEN -ph2.historyPoint 
	                    ELSE 0 
	                END), 0
	            )
	            FROM pointHistory ph2
	            WHERE ph2.userNum = ph.userNum
	            AND (ph2.historyDate < ph.historyDate 
	                OR (ph2.historyDate = ph.historyDate 
	                    AND ph2.historyNum <= ph.historyNum)
	            )
	        ) AS total
	    FROM pointHistory ph
	    JOIN pointPurpose pp ON ph.pointPurposeNum = pp.pointPurposeNum
	    WHERE ph.userNum = #{userNum}
	]]>
		<if test="startDate != null">
    <![CDATA[ 
        AND ph.historyDate >= STR_TO_DATE(#{startDate}, '%Y-%m-%d')
    ]]>
    </if>
		<if test="endDate != null">
    <![CDATA[ 
        AND ph.historyDate < STR_TO_DATE(#{endDate}, '%Y-%m-%d') + INTERVAL 1 DAY
    ]]>
    </if>
	<![CDATA[
	    ORDER BY ph.historyDate DESC, ph.historyNum DESC
	    LIMIT #{size} OFFSET #{page}
	]]>
	</select>

	<!-- 전체 포인트 내역 수 조회 추가 -->
	<select id="getTotalPointHistoryCount" parameterType="map" resultType="int">
	<![CDATA[
	    SELECT COUNT(*)
	    FROM pointHistory ph
	    WHERE ph.userNum = #{userNum}
	]]>
		<if test="startDate != null">
    <![CDATA[ 
        AND ph.historyDate >= STR_TO_DATE(#{startDate}, '%Y-%m-%d')
    ]]>
    </if>
		<if test="endDate != null">
    <![CDATA[ 
        AND ph.historyDate < STR_TO_DATE(#{endDate}, '%Y-%m-%d') + INTERVAL 1 DAY
    ]]>
    </if>
	</select>


	<!-- 회원 보관함 기프티콘 리스트 조회 -->
	<select id="getUserGiftCards" parameterType="int"
		resultType="com.javaex.vo.HmkGiftVo">
        <![CDATA[
             SELECT
        ph.purchaseNum,         -- purchaseNum 추가
        i.itemNum AS id,
        i.itemName AS name,
        i.itemImg AS image,
        ph.purchasedStatus,
        ib.itemBrandName AS description,
        ph.purchasedDate,
        ph.usedDate,
        CASE
            WHEN ph.purchasedStatus = '사용완료' THEN TRUE
            ELSE FALSE
        END AS isUsed
    FROM
        purchaseHistory ph
        JOIN item i ON ph.itemNum = i.itemNum
        JOIN itemBrand ib ON i.itemBrandNum = ib.itemBrandNum
    WHERE
        ph.userNum = #{userNum}
        AND ph.purchasedStatus IN ('사용가능', '사용완료')
    ORDER BY 
        CASE 
            WHEN ph.purchasedStatus = '사용가능' THEN 0 
            ELSE 1 
        END,
        ph.purchasedDate DESC;
        ]]>
	</select>

	<!-- 기프티콘 사용 처리를 위한 업데이트 쿼리 -->
	<update id="updateGiftcardStatus" parameterType="int">
		<![CDATA[
		    UPDATE purchaseHistory
		    SET
		        purchasedStatus = '사용완료',
		        usedDate = CONVERT_TZ(CURRENT_TIMESTAMP, '+00:00', '+09:00')
		    WHERE
		        purchaseNum = #{purchaseNum}
		        AND purchasedStatus = '사용가능'
		]]>
	</update>

	<!-- 기프티콘 소유권 확인 -->
	<select id="checkGiftcardOwnership" parameterType="map" resultType="boolean">
		<![CDATA[
		    SELECT 
		        COUNT(*) > 0
		    FROM 
		        purchaseHistory
		    WHERE 
		        purchaseNum = #{purchaseNum}
		        AND userNum = #{userNum}
		        AND purchasedStatus = '사용가능'
		]]>
	</select>

	<!-- 알림 요약 정보 조회 -->
	<select id="getNoticeSummary" parameterType="int"
		resultType="com.javaex.vo.HmkNoticeSummaryVo">
        <![CDATA[
            SELECT 
                COUNT(*) AS totalNotice,
                SUM(CASE WHEN isCheck = 1 THEN 1 ELSE 0 END) AS readNotice,
                SUM(CASE WHEN isCheck = 0 THEN 1 ELSE 0 END) AS newNotice
            FROM notice
            WHERE userNum = #{userNum}
        ]]>
    </select>

	<!-- 알림 리스트 조회 -->
	<select id="getNotices" parameterType="map"
		resultType="com.javaex.vo.HmkNoticeVo">
        <![CDATA[
            SELECT
                n.noticeNum,
                n.userNum,
                n.noticeTitle,
                n.noticeMsg,
                n.isCheck,
                DATE_FORMAT(n.createDate, '%Y-%m-%d') AS createDate,
                n.msgSender,
                u.userName AS senderNickname
            FROM notice n
            JOIN users u ON n.msgSender = u.userNum
            WHERE n.userNum = #{userNum}
            ]]>
		<if test="startDate != null and startDate != ''">
        <![CDATA[
                AND n.createDate &gt;= #{startDate}
                ]]>
            </if>
		<if test="endDate != null and endDate != ''">
        <![CDATA[
                AND n.createDate &lt;= #{endDate}
                ]]>
            </if>
        <![CDATA[
            ORDER BY n.createDate DESC
        ]]>
	</select>


</mapper>