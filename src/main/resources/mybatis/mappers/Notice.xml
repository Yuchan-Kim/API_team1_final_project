<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="Notice">
	<!-- 회원 가입 환영 메세지-->
	<insert id="insertSignupNotice" parameterType="int">
	<![CDATA[
	    INSERT INTO notice (userNum, noticeTitle, noticeMsg, isCheck, msgSender)
	    VALUES (
	        #{userNum},
	        '회원가입을 환영합니다!',
	        'DONKEY: 동기키우기의 회원이 되신 것을 환영합니다. 축하 포인트 10,000P가 지급되었습니다.',
	        0,
	        0
	    )
	]]>
	</insert>

	<!-- 방 생성 알림 추가 -->
	<insert id="insertRoomCreationNotice" parameterType="map">
    <![CDATA[
        INSERT INTO notice (userNum, noticeTitle, noticeMsg, msgSender)
        VALUES (
            #{roomMaker},
            CONCAT('[방 생성 알림] ', #{roomTitle}),
            CONCAT('"', #{roomTitle}, '" 방이 성공적으로 생성되었습니다.'),
            #{roomMaker}
        )
    ]]>
    </insert>

	<!-- 방 참가 알림 추가 (방장에게) -->
	<insert id="insertRoomEnterNoticeToMaker" parameterType="map">
    <![CDATA[
        INSERT INTO notice (userNum, noticeTitle, noticeMsg, msgSender)
        VALUES (
            #{roomMaker},
            CONCAT('[방 참가 알림] ', #{roomTitle}),
            CONCAT('"', #{userName}, '"님이 "', #{roomTitle}, '" 방에 참여하였습니다.'),
            #{newUserNum}
        )
    ]]>
    </insert>

	<!-- 방 참가 알림 추가 (참가자에게) -->
	<insert id="insertRoomEnterNoticeToUser" parameterType="map">
    <![CDATA[
        INSERT INTO notice (userNum, noticeTitle, noticeMsg, msgSender)
        VALUES (
            #{newUserNum},
            CONCAT('[방 참가 알림] ', #{roomTitle}),
            CONCAT('"', #{roomTitle}, '" 방에 참가하였습니다.'),
            #{roomMaker}
        )
    ]]>
    </insert>

	<!-- 방 시작 알림 추가 (모든 참가자에게) -->
	<insert id="insertRoomStartNotice" parameterType="map">
    <![CDATA[
        INSERT INTO notice (userNum, noticeTitle, noticeMsg, msgSender)
        SELECT 
            eu.userNum,
            CONCAT('[방 시작 알림] ', #{roomTitle}),
            CONCAT('"', #{roomTitle}, '" 방이 시작되었습니다. 함께 목표를 달성해보세요!'),
            #{roomMaker}
        FROM enteredUser eu
        WHERE eu.roomNum = #{roomNum}
    ]]>
    </insert>

	<!-- 방 종료 알림 추가 (모든 참가자에게) -->
	<insert id="insertRoomEndNotice" parameterType="map">
    <![CDATA[
        INSERT INTO notice (userNum, noticeTitle, noticeMsg, msgSender)
        SELECT 
            eu.userNum,
            CONCAT('[방 종료 알림] ', #{roomTitle}),
            CONCAT('"', #{roomTitle}, '" 방이 종료되었습니다. 수고하셨습니다!'),
            #{roomMaker}
        FROM enteredUser eu
        WHERE eu.roomNum = #{roomNum}
    ]]>
    </insert>

	<!-- 방 상태 조회 -->
	<select id="getRoomStatus" parameterType="int" resultType="int">
    <![CDATA[
        SELECT roomStatusNum
        FROM roomInfo
        WHERE roomNum = #{roomNum}
    ]]>
    </select>

	<!-- 방 정보 조회 -->
	<select id="getRoomInfo" parameterType="int" resultType="map">
    <![CDATA[
        SELECT 
            ri.roomNum,
            ri.roomTitle,
            ri.roomMaker,
            ri.roomStatusNum,
            rs.roomStatusName
        FROM roomInfo ri
        JOIN roomStatus rs ON ri.roomStatusNum = rs.roomStatusNum
        WHERE ri.roomNum = #{roomNum}
    ]]>
    </select>

	<!-- 유저 이름 조회 -->
	<select id="getUserName" parameterType="int" resultType="string">
    <![CDATA[
        SELECT userName
        FROM users
        WHERE userNum = #{userNum}
    ]]>
    </select>

	<!-- 알림 읽음 여부 업데이트 -->
	<update id="updateNoticeReadStatus" parameterType="int">
    <![CDATA[
        UPDATE notice
        SET isCheck = 1
        WHERE noticeNum = #{noticeNum}
	    ]]>
	</update>

	<!-- 알림 조회 -->
	<select id="getNotices" parameterType="map"
		resultType="com.javaex.vo.HmkNoticeVo">
	<![CDATA[
	    SELECT 
	        n.noticeNum,
	        n.userNum,
	        n.noticeTitle,
	        n.noticeMsg,
	        n.isCheck,
	        DATE_FORMAT(n.createDate, '%Y-%m-%d') AS createDate,
	        n.msgSender,
	        u.userName AS senderNickname,
	        CASE 
	            WHEN n.noticeTitle LIKE '%방%' THEN (
	                -- 알림 제목에서 방 번호 추출
	                SELECT DISTINCT ri.roomNum
	                FROM roomInfo ri 
	                JOIN enteredUser eu ON ri.roomNum = eu.roomNum
	                WHERE eu.userNum = n.userNum 
	                AND eu.enteredUserStatusNum = 1
	                AND (
	                    -- 알림 생성 시간과 가장 가까운 방을 찾음
	                    ri.roomStartDate <= n.createDate
	                    OR ri.roomStartDate IS NULL
	                )
	                ORDER BY ABS(TIMESTAMPDIFF(SECOND, ri.roomStartDate, n.createDate))
	                LIMIT 1
	            )
	            ELSE NULL 
	        END as roomNum
	    FROM notice n
	    JOIN users u ON n.msgSender = u.userNum
	    WHERE n.userNum = #{userNum}
	]]>
		<if test="startDate != null and startDate != ''">
	    <![CDATA[ AND n.createDate >= #{startDate} ]]>
	    </if>
		<if test="endDate != null and endDate != ''">
	    <![CDATA[ AND n.createDate <= #{endDate} ]]>
	    </if>
	<![CDATA[ 
	    ORDER BY n.createDate DESC 
	]]>
	</select>

	<!-- 알림 요약 정보 조회 -->
	<select id="getNoticeSummary" parameterType="int" resultType="map">
	<![CDATA[
	    SELECT 
            COUNT(*) AS totalNotice,
            SUM(CASE WHEN isCheck = 1 THEN 1 ELSE 0 END) AS readNotice,
            SUM(CASE WHEN COALESCE(isCheck, 0) = 0 THEN 1 ELSE 0 END) AS newNotice
        FROM notice
        WHERE userNum = #{userNum}
	]]>
</select>
</mapper>